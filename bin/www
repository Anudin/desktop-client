#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('desktop:server');
var http = require('http');
const ciao = require("@homebridge/ciao");

/**
 * Get port from environment and store in Express.
 */

// FIXME Change port number!
const staticPort = 3000;
var port = normalizePort(process.env.PORT || staticPort.toString());
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const responder = ciao.getResponder();
const service = responder.createService({
    name: 'com example desktop',
    type: 'http',
    port: staticPort
})
service.advertise().then(() => {
    console.log("Service is published :)");
});

process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);

// FIXME Process isn't stopping properly
function shutdown() {
    console.log('Closing HTTP server');
    service.destroy().then(() => {
        server.close(() => {
            console.log('HTTP server closed');
        })
    });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
